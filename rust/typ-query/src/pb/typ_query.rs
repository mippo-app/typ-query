// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kv {
    #[prost(string, tag = "2")]
    pub key: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub operant: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "20")]
    pub value: ::core::option::Option<typ_p::pb::typ_p::Value>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum KvOp {
    Unknown = 0,
    Eq = 1,
}
impl KvOp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            KvOp::Unknown => "KV_OP_UNKNOWN",
            KvOp::Eq => "KV_OP_EQ",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "KV_OP_UNKNOWN" => Some(Self::Unknown),
            "KV_OP_EQ" => Some(Self::Eq),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keyword {
    #[prost(oneof = "keyword::ValueOf", tags = "1, 2")]
    pub value_of: ::core::option::Option<keyword::ValueOf>,
}
/// Nested message and enum types in `Keyword`.
pub mod keyword {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ValueOf {
        #[prost(message, tag = "1")]
        Kv(super::Kv),
        #[prost(message, tag = "2")]
        Keywords(super::Keywords),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keywords {
    #[prost(string, tag = "1")]
    pub operant: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub keywords: ::prost::alloc::vec::Vec<Keyword>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Leveler {
    #[prost(map = "string, message", tag = "2")]
    pub keyword_map: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Keyword,
    >,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
    #[prost(string, tag = "1")]
    pub search_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub target_type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub levels: ::prost::alloc::vec::Vec<Leveler>,
    #[prost(oneof = "query::ValueOf", tags = "3, 4")]
    pub value_of: ::core::option::Option<query::ValueOf>,
}
/// Nested message and enum types in `Query`.
pub mod query {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ValueOf {
        #[prost(message, tag = "3")]
        Keyword(super::Keyword),
        #[prost(message, tag = "4")]
        Queries(super::Queries),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Queries {
    #[prost(string, tag = "1")]
    pub operant: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub queries: ::prost::alloc::vec::Vec<Query>,
}
